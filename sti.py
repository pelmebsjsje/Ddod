import json
import asyncio
import re
import time
import logging
import hashlib
from typing import Dict, List
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import cloudscraper
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='sticker_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7566077832:AAF7oS5iOWfSGA14NM5AjrO2u8kNUM-djws"
STOCK_CHANNEL_ID = "@sbtdrasik"
STOCK_URL = "https://www.vulcanvalues.com/grow-a-garden/stock"
STOCK_CHECK_INTERVAL = 30  # –ö–î 30 —Å–µ–∫—É–Ω–¥
MSG_ID_FILE = "last_messages.json"
PREV_STOCK_FILE = "prev_stock.json"
STICKER_IDS_FILE = "sticker_ids.json"
LAST_SENT_PERIODS_FILE = "last_sent_periods.json"
ADMIN_ID = "5194736461"
BOT_USERNAME = "@growagardenstock_abot"

SECTION_LIST = ["GEAR STOCK", "EGG STOCK", "SEEDS STOCK", "COSMETICS STOCK"]
SELECTABLE_SECTIONS = ["GEAR STOCK", "EGG STOCK", "SEEDS STOCK"]
SECTION_EMOJI = {"GEAR STOCK": "‚öôÔ∏è", "EGG STOCK": "ü•ö", "SEEDS STOCK": "üå±", "COSMETICS STOCK": "üß¥"}
SECTION_TRANSLATE = {"GEAR STOCK": "–ü—Ä–µ–¥–º–µ—Ç—ã", "EGG STOCK": "–Ø–π—Ü–∞", "SEEDS STOCK": "–°–µ–º–µ–Ω–∞", "COSMETICS STOCK": "–ö–æ—Å–º–µ—Ç–∏–∫–∞"}
SECTION_PERIOD = {"GEAR STOCK": 5, "SEEDS STOCK": 5, "EGG STOCK": 30, "COSMETICS STOCK": 240}

ITEM_TRANSLATE = {
    "Sugar Apple": "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ",
    "Cacao": "–ö–∞–∫–∞–æ",
    "Pepper": "–ü–µ—Ä–µ—Ü",
    "Ember Lily": "–≠–º–±–µ—Ä –ª–∏–ª–∏—è",
    "Beanstalk": "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å",
    "Lightning Rod": "–ì—Ä–æ–º–æ–≤–æ–¥",
    "Mythical Egg": "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ",
    "Master Sprinkler": "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å",
    "Mushroom": "–ì—Ä–∏–±",
    "Bug Egg": "–ë–∞–≥ —è–π—Ü–æ",
    "Mango": "–ú–∞–Ω–≥–æ",
    "Dragon Fruit": "–ü–∏—Ç–∞–π—è",
    "Friendship Pot": "–ì–æ—Ä—à–æ–∫ –¥—Ä—É–∂–±—ã",
    "Kiwi": "–ö–∏–≤–∏",
    "Kiwifruit": "–ö–∏–≤–∏",
    "Pineapple Fruit": "–ê–Ω–∞–Ω–∞—Å",
    "Prickly Pear": "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä",
    "Loquat": "–ú—É—à–º—É–ª–∞",
    "Feijoa": "–§–µ–π—Ö–æ–∞",
    "Tanning Mirror": "–ó–µ—Ä–∫–∞–ª–æ –¥–ª—è –∑–∞–≥–∞—Ä–∞",
    "Paradise Egg": "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ"
}

ITEM_EMOJI = {
    "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ": "üçé",
    "–ö–∞–∫–∞–æ": "üç´",
    "–ü–µ—Ä–µ—Ü": "üå∂Ô∏è",
    "–≠–º–±–µ—Ä –ª–∏–ª–∏—è": "üå∏",
    "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å": "üå±",
    "–ì—Ä–æ–º–æ–≤–æ–¥": "‚ö°Ô∏è",
    "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ": "üî¥",
    "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å": "üèÜ",
    "–ì—Ä–∏–±": "üçÑ",
    "–ë–∞–≥ —è–π—Ü–æ": "üêû",
    "–ú–∞–Ω–≥–æ": "ü•≠",
    "–ü–∏—Ç–∞–π—è": "üêâ",
    "–ì–æ—Ä—à–æ–∫ –¥—Ä—É–∂–±—ã": "üåº",
    "–ö–∏–≤–∏": "ü•ù",
    "–ê–Ω–∞–Ω–∞—Å": "üçç",
    "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä": "üåµ",
    "–ú—É—à–º—É–ª–∞": "üçë",
    "–§–µ–π—Ö–æ–∞": "ü•≠",
    "–ó–µ—Ä–∫–∞–ª–æ –¥–ª—è –∑–∞–≥–∞—Ä–∞": "ü™û",
    "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ": "üü°"
}

egg_colors = {
    "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ": "üü•",
    "–ë–∞–≥ —è–π—Ü–æ": "üü¢",
    "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ": "üü°"
}

ALLOWED_ITEMS = list(ITEM_TRANSLATE.values())
waiting_sticker = {}
last_update_time = 0
update_lock = asyncio.Lock()

def normalize_item_name(name: str) -> str:
    if not name:
        return ""
    name = re.sub(r'\s*x\d+\s*$', '', name, flags=re.IGNORECASE)
    name = re.sub(r'\s+', ' ', name.strip())
    name_lower = name.lower()
    for eng_name in ITEM_TRANSLATE:
        if eng_name.lower() == name_lower:
            return eng_name
    return name.title()

def normalize_stock(stocks: Dict) -> Dict:
    normalized = {}
    for section, items in stocks.items():
        normalized[section] = sorted(
            [
                {
                    "name": item["name"].strip().lower(),
                    "emoji": ''.join(sorted(item["emoji"].strip())),
                    "qty": item["qty"].strip().lower()
                }
                for item in items
            ],
            key=lambda x: x["name"]
        )
    return normalized

def get_stock_hash(stocks: Dict) -> str:
    norm_stocks = normalize_stock(stocks)
    stock_str = json.dumps(norm_stocks, sort_keys=True, ensure_ascii=False)
    return hashlib.md5(stock_str.encode('utf-8')).hexdigest()

def get_period_block(section: str) -> str:
    now = datetime.now()
    period_min = SECTION_PERIOD.get(section, 30)
    block_start = now.replace(second=0, microsecond=0)
    if period_min >= 30:
        minute = (block_start.minute // period_min) * period_min
        block_start = block_start.replace(minute=minute)
    elif period_min == 5:
        minute = (block_start.minute // 5) * 5
        block_start = block_start.replace(minute=minute)
    block_end = block_start + timedelta(minutes=period_min)
    period_str = f"{block_start.strftime('%H:%M')}-{block_end.strftime('%H:%M')}"
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–∏–æ–¥ –¥–ª—è {section}: {period_str}")
    return period_str

def get_stock() -> Dict:
    max_retries = 3
    for attempt in range(max_retries):
        try:
            scraper = cloudscraper.create_scraper()
            response = scraper.get(STOCK_URL, timeout=15, headers={'Cache-Control': 'no-cache'})
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            logger.debug(f"–°—ã—Ä–æ–π HTML: {response.text[:500]}...")
            stocks = {section: [] for section in SECTION_LIST}
            for h2 in soup.find_all("h2"):
                section_name = h2.get_text(strip=True).upper()
                if section_name not in SECTION_LIST:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {section_name}")
                    continue
                ul = h2.find_next(lambda tag: tag.name == "ul")
                if not ul:
                    logger.debug(f"–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏: {section_name}")
                    continue
                formatted_items = []
                for li in ul.find_all("li"):
                    text = li.get_text(strip=True, separator=" ")
                    logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞: {text}")
                    qty_match = re.search(r'\s*x(\d+)\s*$', text, re.IGNORECASE)
                    qty = qty_match.group(1) if qty_match else ""
                    name = re.sub(r'\s*x\d+\s*$', '', text, flags=re.IGNORECASE).strip()
                    if not name:
                        logger.debug("–ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫")
                        continue
                    spans = li.find_all("span")
                    if len(spans) >= 1:
                        name = spans[0].get_text(strip=True)
                        logger.debug(f"–ò–º—è –∏–∑ span: {name}")
                        if len(spans) == 2:
                            qty = spans[1].get_text(strip=True).replace("x", "").strip()
                            logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ span: {qty}")
                    normalized_name = normalize_item_name(name)
                    logger.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {normalized_name}")
                    translated_name = ITEM_TRANSLATE.get(normalized_name, normalized_name)
                    logger.debug(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è: {translated_name}")
                    if translated_name not in ALLOWED_ITEMS:
                        logger.debug(f"–ü—Ä–µ–¥–º–µ—Ç {translated_name} –Ω–µ –≤ ALLOWED_ITEMS, –ø—Ä–æ–ø—É—Å–∫")
                        continue
                    emoji = ITEM_EMOJI.get(translated_name, SECTION_EMOJI.get(section_name, ""))
                    color_emoji = egg_colors.get(translated_name, "")
                    if qty:
                        formatted_items.append({"name": translated_name, "emoji": f"{emoji}{color_emoji}", "qty": f"x{qty}"})
                    else:
                        formatted_items.append({"name": translated_name, "emoji": f"{emoji}{color_emoji}", "qty": ""})
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {translated_name}, —ç–º–æ–¥–∑–∏: {emoji}{color_emoji}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}")
                stocks[section_name] = formatted_items
            if not any(stocks[section] for section in SELECTABLE_SECTIONS):
                logger.warning(f"–ü—É—Å—Ç–æ–π —Å—Ç–æ–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫")
                if attempt < max_retries - 1:
                    time.sleep(5)
                    continue
                logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–∞–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç–æ–∫")
                return {section: [] for section in SECTION_LIST}
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–æ–∫: {json.dumps(stocks, ensure_ascii=False)}")
            return stocks
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {str(e)}")
            if attempt < max_retries - 1:
                time.sleep(5)
                continue
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            return {section: [] for section in SECTION_LIST}

def load_json_file(path: str, default: Dict) -> Dict:
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {path}: {data}")
            return data
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {str(e)}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default

def save_json_file(path: str, data: Dict):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª {path}: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {str(e)}")

async def check_bot_permissions(bot: Bot, chat_id: str) -> bool:
    try:
        bot_member = await bot.get_chat_member(chat_id=chat_id, user_id=bot.id)
        logger.debug(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ {chat_id}: {bot_member}")
        if bot_member.status not in ['administrator', 'creator']:
            logger.error(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ {chat_id}")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ {chat_id}")
            return False
        if not bot_member.can_post_messages or not bot_member.can_delete_messages:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ {chat_id}")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ {chat_id}")
            return False
        return True
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤ {chat_id}: {str(e)}")
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤ {chat_id}: {str(e)}")
        return False

async def send_sticker_stock(bot: Bot, chat_id: str, stocks: Dict, last_msgs: Dict, last_sent_periods: Dict) -> Dict:
    sticker_ids = load_json_file(STICKER_IDS_FILE, {item: "" for item in ALLOWED_ITEMS})
    logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∏–∫–µ—Ä—ã: {sticker_ids}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
    current_time = datetime.now()
    for section in SELECTABLE_SECTIONS:
        last_period = last_sent_periods.get(section, "")
        if last_period:
            try:
                end_time_str = last_period.split("-")[1]
                end_time = datetime.strptime(end_time_str, "%H:%M").replace(
                    year=current_time.year, month=current_time.month, day=current_time.day
                )
                if end_time < current_time - timedelta(days=1):
                    end_time += timedelta(days=1)
                if current_time > end_time:
                    logger.debug(f"–ü–µ—Ä–∏–æ–¥ {last_period} –¥–ª—è {section} –∑–∞–≤–µ—Ä—à—ë–Ω, –æ—á–∏—â–∞–µ–º")
                    last_sent_periods[section] = ""
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–∏–æ–¥–∞ {last_period} –¥–ª—è {section}: {e}")
                last_sent_periods[section] = ""  # –û—á–∏—â–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

    for section in SELECTABLE_SECTIONS:
        items = stocks.get(section, [])
        if not items:
            logger.debug(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ {section}")
            continue
        current_period = get_period_block(section)
        last_sent = last_sent_periods.get(section, "")
        logger.debug(f"–°–µ–∫—Ü–∏—è {section}: —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ {current_period}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π {last_sent}")
        
        if last_sent == current_period:
            logger.info(f"–°–µ–∫—Ü–∏—è {section} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–∏–æ–¥ {current_period}, –ø—Ä–æ–ø—É—Å–∫")
            continue
        
        section_key = section.lower().replace(" ", "_")
        if section_key in last_msgs and last_msgs[section_key]:
            for attempt in range(5):
                try:
                    await bot.delete_message(chat_id=chat_id, message_id=last_msgs[section_key])
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id}, ID: {last_msgs[section_key]}")
                    break
                except TelegramError as e:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                    if attempt == 4:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ {section}: {str(e)}")
                    await asyncio.sleep(1)
        
        try:
            message_ids = []
            for item in items:
                sticker_id = sticker_ids.get(item['name'], "")
                if sticker_id:
                    try:
                        msg = await bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
                        message_ids.append(msg.message_id)
                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è {item['name']} –≤ {chat_id}, ID: {msg.message_id}")
                    except TelegramError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è {item['name']}: {str(e)}")
                else:
                    logger.debug(f"–ù–µ—Ç —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è {item['name']}, –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            if message_ids:
                last_msgs[section_key] = message_ids[0]
                last_sent_periods[section] = current_period
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id}, –ø–µ—Ä–≤—ã–π ID: {message_ids[0]}, –ø–µ—Ä–∏–æ–¥: {current_period}")
            else:
                logger.warning(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id}: {str(e)}")
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–∫—Ü–∏–∏ {section} –≤ {chat_id}: {str(e)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_json_file(LAST_SENT_PERIODS_FILE, last_sent_periods)
    return last_msgs

async def start(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    command = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}, ADMIN_ID: {ADMIN_ID}")
    if command not in [f"/start", f"/start{BOT_USERNAME}"]:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
        return
    if user_id != ADMIN_ID:
        logger.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: user_id ({user_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ADMIN_ID ({ADMIN_ID})")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ —á–∞—Ç–µ {chat_id}. –ò—Å–ø–æ–ª—å–∑—É–π:\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã\n/change ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã\n/check_stickers ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã"
    )

async def add_sticker(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    command = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    if command not in [f"/add", f"/add{BOT_USERNAME}"]:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
        return
    if user_id != ADMIN_ID:
        logger.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: user_id ({user_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ADMIN_ID ({ADMIN_ID})")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"sticker_{name}")]
        for name in sorted(ALLOWED_ITEMS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìå –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)

async def change_sticker(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    command = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    if command not in [f"/change", f"/change{BOT_USERNAME}"]:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
        return
    if user_id != ADMIN_ID:
        logger.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: user_id ({user_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ADMIN_ID ({ADMIN_ID})")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"sticker_{name}")]
        for name in sorted(ALLOWED_ITEMS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìå –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã:", reply_markup=reply_markup)

async def check_stickers(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    command = update.message.text
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    if command not in [f"/check_stickers", f"/check_stickers{BOT_USERNAME}"]:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É: {command}")
        return
    if user_id != ADMIN_ID:
        logger.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: user_id ({user_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ADMIN_ID ({ADMIN_ID})")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    sticker_ids = load_json_file(STICKER_IDS_FILE, {item: "" for item in ALLOWED_ITEMS})
    await update.message.reply_text("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:")
    for item in sorted(ALLOWED_ITEMS):
        sticker_id = sticker_ids.get(item, "")
        if sticker_id:
            await update.message.reply_text(f"‚úÖ {item}:")
            try:
                await update.message.reply_sticker(sticker=sticker_id)
                logger.debug(f"–ü–æ–∫–∞–∑–∞–Ω —Å—Ç–∏–∫–µ—Ä –¥–ª—è {item} –≤ —á–∞—Ç–µ {chat_id}")
            except TelegramError as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è {item}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è {item}: {str(e)}")
        else:
            await update.message.reply_text(f"‚ùå {item}: –°—Ç–∏–∫–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            logger.debug(f"–°—Ç–∏–∫–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {item} –≤ {chat_id}")

async def sticker_callback(update: Update, context):
    user_id = str(update.effective_user.id)
    logger.debug(f"Callback –æ—Ç {user_id}: {update.callback_query.data}")
    if user_id != ADMIN_ID:
        await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    query = update.callback_query
    item_name = query.data.replace("sticker_", "")
    if item_name not in ALLOWED_ITEMS:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.")
        return
    waiting_sticker[user_id] = item_name
    await query.message.reply_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å —Å—Ç–∏–∫–µ—Ä –¥–ª—è '{item_name}'.")
    await query.answer()

async def handle_sticker(update: Update, context):
    user_id = str(update.effective_user.id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç {user_id}")
    if user_id != ADMIN_ID:
        return
    if user_id not in waiting_sticker:
        await update.message.reply_text("‚ùì –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ /add –∏–ª–∏ /change.")
        return
    item_name = waiting_sticker[user_id]
    sticker = update.message.sticker
    if not sticker:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Ç–∏–∫–µ—Ä.")
        return
    sticker_id = sticker.file_id
    sticker_ids = load_json_file(STICKER_IDS_FILE, {item: "" for item in ALLOWED_ITEMS})
    sticker_ids[item_name] = sticker_id
    save_json_file(STICKER_IDS_FILE, sticker_ids)
    await update.message.reply_text(f"‚úÖ –°—Ç–∏–∫–µ—Ä –¥–ª—è '{item_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    logger.debug(f"–°—Ç–∏–∫–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {item_name}: {sticker_id}")
    del waiting_sticker[user_id]

async def debug_update(update: Update, context):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.to_dict()}")

async def update_stock(app: Application):
    global last_update_time
    async with update_lock:
        current_time = time.time()
        if current_time - last_update_time < STOCK_CHECK_INTERVAL - 5:
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (–ø—Ä–æ—à–ª–æ {current_time - last_update_time:.1f} —Å–µ–∫)")
            return
        last_update_time = current_time
        bot = app.bot
        start_time = time.time()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ –Ω–∞—á–∞—Ç–∞")
        try:
            stocks = get_stock()
            if not any(stocks[section] for section in SELECTABLE_SECTIONS):
                logger.warning("–°—Ç–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            current_hash = get_stock_hash(stocks)
            prev_stock = load_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
            prev_hash = get_stock_hash(prev_stock)
            logger.debug(f"–¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫ (—Ö—ç—à: {current_hash}): {json.dumps(normalize_stock(stocks), ensure_ascii=False)}")
            logger.debug(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫ (—Ö—ç—à: {prev_hash}): {json.dumps(normalize_stock(prev_stock), ensure_ascii=False)}")
            if current_hash == prev_hash:
                logger.info("–°—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            if await check_bot_permissions(bot, STOCK_CHANNEL_ID):
                last_msgs = load_json_file(MSG_ID_FILE, {section.lower().replace(" ", "_"): None for section in SELECTABLE_SECTIONS})
                last_sent_periods = load_json_file(LAST_SENT_PERIODS_FILE, {section: "" for section in SELECTABLE_SECTIONS})
                logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã last_sent_periods: {last_sent_periods}")
                last_msgs = await send_sticker_stock(bot, STOCK_CHANNEL_ID, stocks, last_msgs, last_sent_periods)
                save_json_file(MSG_ID_FILE, last_msgs)
                save_json_file(LAST_SENT_PERIODS_FILE, last_sent_periods)
                save_json_file(PREV_STOCK_FILE, stocks)
                logger.info(f"–°—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")
            else:
                logger.error("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∫–∞: {str(e)}")
            await asyncio.sleep(1)

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    if not TELEGRAM_BOT_TOKEN or "YOUR_STICKER_BOT_TOKEN_HERE" in TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º prev_stock.json –∏ last_sent_periods.json –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        save_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
        save_json_file(LAST_SENT_PERIODS_FILE, {section: "" for section in SELECTABLE_SECTIONS})
        logger.info(f"–§–∞–π–ª—ã {PREV_STOCK_FILE} –∏ {LAST_SENT_PERIODS_FILE} —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
        app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start, filters=filters.COMMAND))
        app.add_handler(CommandHandler("add", add_sticker, filters=filters.COMMAND))
        app.add_handler(CommandHandler("change", change_sticker, filters=filters.COMMAND))
        app.add_handler(CommandHandler("check_stickers", check_stickers, filters=filters.COMMAND))
        app.add_handler(CallbackQueryHandler(sticker_callback, pattern="^sticker_"))
        app.add_handler(MessageHandler(filters.Sticker.ALL & filters.User(user_id=int(ADMIN_ID)), handle_sticker))
        app.add_handler(MessageHandler(filters.ALL, debug_update))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        async with app:
            await app.initialize()
            await app.start()
            await app.updater.start_polling(drop_pending_updates=True)
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            while True:
                await update_stock(app)
                await asyncio.sleep(STOCK_CHECK_INTERVAL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())